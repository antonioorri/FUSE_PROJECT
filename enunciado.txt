Descarga el repositorio con los fuentes del ejercicio.

git clone https://DSO2014@bitbucket.org/DSO2014/ejercicio_fuse.git

Completa el fichero basicFUSE.c para lograr montar y acceder a un sistema de ficheros virtual que acceda a los capítulos de un libro que está almacenado en el fichero de texto proverbiosycantares.txt

Ya hay escritas unas funciones auxiliares (basicFUSE_lib.c) que leen del fichero los capítulos y los almacenan en memoria en una estructura del tipo struct structura_mis_datos que está definida en basicFUSE_lib.h

Esta estructura llamada mis_datos se pasa a FUSE en la función fuse_main() por lo que será accesible en las funciones que implementan las operaciones de FUSE mediante el uso de la función fuse_get_context(). Vease ejemplo de uso:

struct structura_mis_datos *mis_datos= (struct structura_mis_datos *) fuse_get_context()->private_data;

int n = mis_datos->numero_ficheros;

Otra función auxiliar importante que está disponible es la que localiza un nombre de fichero (capítulo del libro) en la estructura. La función está definida como:

int buscar_fichero(const char *path, struct structura_mis_datos *mis_datos);

Devuelve la posición del capítulo en la estructura mis_datos y devuelve -1 en caso de no ser encontrado. Veamos un ejemplo de uso:

struct structura_mis_datos *mis_datos= (struct structura_mis_datos *) fuse_get_context()->private_data;

int i = buscar_fichero  ("/nombre" , mis_datos);

if ( i>=0) 

printf("nombre: %s\n contenido:\n %s\n", mis_datos->nombre_ficheros[i], mis_datos->contenido_ficheros[i] );

Un consejo sobre la implementación de mi_read() y mi_open(): una vez localizado el fichero en mi_open() guardar su posición en el fichero de texto de entrada (es un entero) usando la estructura de información de fichero de FUSE en fi->fh. Después se podrá recuperar ese "file handler" desde la llamada a mi_read() y así no será necesario volver a buscar el path.
Objetivo

La tarea consiste en completar las cuatro funciones básicas propuestas en basicFUSE.c para conseguir acceder a los capítulos en forma de ficheros. Todos los capítulos serán visibles en el punto de montaje. Además se crearán dos directorios "BIG" y "little" donde se mostrarán los capítulos de más de 256 bytes y menos respectivamente. De esta forma cada capítulo será accesible en el directorio raíz del punto de montaje y también en el directorio correspondiente a su tamaño.

Para simplificar la tarea yo comenzaría haciendo funcionar el directorio raíz y después añadiría los dos directorios adicionales "BIG" y "little".

Hay un Makefile preparado para compilar el ejercicio. También tiene reglas para montar y desmontar el sistema de ficheros virtual.

Si se quiere depurar el funcionamiento del sistema de ficheros FUSE y poder imprimir con printf(), añadir la opción -d al montar el sistema de ficheros FUSE.
Resultados

Sube tu proyecto terminado a la tarea que encontrarás en el C.V. a continuación de este enunciado.

Los resultados obtenidos deben cumplir estas premisas:

1.- al hacer ls -l del directorio raíz del sistema de ficheros virtual deben verse los capítulos disponibles en el fichero de texto indicado al invocar nuestro programa además de los dos directorios "BIG" y "little". Los tamaños deben ser los correctos y el tamaño en bloques total del contenido del directorio también. Las fechas del fichero y propietarios deben de ser las del fichero original que se ha analizado (información disponible en la estructura mis_datos). Las funciones que se ofrecen como soporte a la lectura del fichero no tienen garantía de funcionamiento con ficheros de entrada distintos al ejemplo del repositorio.

2.- Los ficheros virtuales (capítulos) podrán ser leídos desde cualquier posición. Por ejemplo será posible leer las últimas líneas de un fichero grade, probar con el capítulo titulado "largo":

$ tail -25 largo

3.- Se podrá buscar un contenido en los ficheros como por ejemplo:

$ grep caminante  *
XXIX:caminante, no hay camino:
$ cat XXIX
Caminante, son tus huellas
el camino, y nada más;
caminante, no hay camino:
se hace camino al andar.
Al andar se hace camino,
y al volver la vista atrás
se ve la senda que nunca
se ha de volver a pisar.
Caminante, no hay camino,
sino estelas en la mar.

4.- Respuesta a obtener de los comandos ls:

$ ls -la punto_montaje/
total 18
drwxr-xr-x 4 dso dso 4096 abr  4 11:42 .
drwxr-xr-x 6 dso dso 4096 abr  5 23:48 ..
drwxr-xr-x 2 dso dso 4096 abr  4 11:42 BIG
drwxr-xr-x 2 dso dso 4096 abr  4 11:42 little
-r--r--r-- 1 dso dso  401 abr  4 11:42 XL
-r--r--r-- 1 dso dso  106 abr  4 11:42 XLI
-r--r--r-- 1 dso dso  106 abr  4 11:42 XLII
-r--r--r-- 1 dso dso   98 abr  4 11:42 XLIII
-r--r--r-- 1 dso dso  102 abr  4 11:42 XLIV
-r--r--r-- 1 dso dso  249 abr  4 11:42 XLIX
-r--r--r-- 1 dso dso  167 abr  4 11:42 XLV
-r--r--r-- 1 dso dso  115 abr  4 11:42 XLVI
-r--r--r-- 1 dso dso  108 abr  4 11:42 XLVII
-r--r--r-- 1 dso dso   99 abr  4 11:42 XLVIII
-r--r--r-- 1 dso dso  194 abr  4 11:42 XXI
-r--r--r-- 1 dso dso  264 abr  4 11:42 XXIX
-r--r--r-- 1 dso dso  367 abr  4 11:42 XXVI
-r--r--r-- 1 dso dso  100 abr  4 11:42 XXVII
-r--r--r-- 1 dso dso  100 abr  4 11:42 XXVIII
-r--r--r-- 1 dso dso  159 abr  4 11:42 XXX
-r--r--r-- 1 dso dso  137 abr  4 11:42 XXXII
-r--r--r-- 1 dso dso  183 abr  4 11:42 XXXIII
-r--r--r-- 1 dso dso  328 abr  4 11:42 XXXIV
-r--r--r-- 1 dso dso  327 abr  4 11:42 XXXIX
-r--r--r-- 1 dso dso  405 abr  4 11:42 XXXV
-r--r--r-- 1 dso dso  106 abr  4 11:42 XXXVI
-r--r--r-- 1 dso dso  111 abr  4 11:42 XXXVII
-r--r--r-- 1 dso dso  113 abr  4 11:42 XXXVIII
$ ls -la punto_montaje/BIG
total 4
drwxr-xr-x 2 dso dso 4096 abr  4 11:42 .
drwxr-xr-x 4 dso dso 4096 abr  4 11:42 ..
-r--r--r-- 1 dso dso  401 abr  4 11:42 XL
-r--r--r-- 1 dso dso  264 abr  4 11:42 XXIX
-r--r--r-- 1 dso dso  367 abr  4 11:42 XXVI
-r--r--r-- 1 dso dso  328 abr  4 11:42 XXXIV
-r--r--r-- 1 dso dso  327 abr  4 11:42 XXXIX
-r--r--r-- 1 dso dso  405 abr  4 11:42 XXXV
$
